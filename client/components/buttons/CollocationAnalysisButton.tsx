import React, { useState } from 'react';
import { cn } from '@/lib/utils';

interface CollocationAnalysisButtonProps {
  pageUrl: string;
  mainQuery: string;
  additionalQueries?: string[];
  lsiResults?: any; // –î–æ–±–∞–≤–ª—è–µ–º LSI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  onStart: () => void;
  onSuccess: (data: any) => void;
  onError: (error: string) => void;
  disabled?: boolean;
  className?: string;
}

export const CollocationAnalysisButton: React.FC<CollocationAnalysisButtonProps> = ({
  pageUrl,
  mainQuery,
  additionalQueries = [],
  lsiResults,
  onStart,
  onSuccess,
  onError,
  disabled = false,
  className
}) => {
  const [loading, setLoading] = useState(false);
  const [showSettings, setShowSettings] = useState(false);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
  const [windowSize, setWindowSize] = useState(10);
  const [minFrequency, setMinFrequency] = useState(2);
  const [topN, setTopN] = useState(20);
  const [spacyModel, setSpacyModel] = useState('ru_core_news_sm'); // –û–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
  const [showContexts, setShowContexts] = useState(true);
  const [useLsiWords, setUseLsiWords] = useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º LSI —Å–ª–æ–≤–∞

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ LSI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const getLsiWords = () => {
    if (!lsiResults) return [];

    const words = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≥—Ä–∞–º–º—ã (—Ç–æ–ø-8)
    if (lsiResults.unigrams && Array.isArray(lsiResults.unigrams)) {
      lsiResults.unigrams.slice(0, 8).forEach(item => {
        if (item && item.ngram && typeof item.ngram === 'string') {
          words.push(item.ngram.trim());
        }
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∏–≥—Ä–∞–º–º—ã (—Ç–æ–ø-8)
    if (lsiResults.bigrams && Array.isArray(lsiResults.bigrams)) {
      lsiResults.bigrams.slice(0, 8).forEach(item => {
        if (item && item.ngram && typeof item.ngram === 'string') {
          words.push(item.ngram.trim());
        }
      });
    }

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —Ç—Ä–∏–≥—Ä–∞–º–º—ã (—Ç–æ–ø-4)
    if (lsiResults.trigrams && Array.isArray(lsiResults.trigrams)) {
      lsiResults.trigrams.slice(0, 4).forEach(item => {
        if (item && item.ngram && typeof item.ngram === 'string') {
          words.push(item.ngram.trim());
        }
      });
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    return [...new Set(words)].filter(word => word.length > 0).slice(0, 20);
  };

  const handleAnalysis = async () => {
    if (!pageUrl) {
      onError('–ù–µ —É–∫–∞–∑–∞–Ω URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      return;
    }

    setLoading(true);
    onStart();

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
      let targetPhrases = [];

      if (useLsiWords && lsiResults) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ –∏–∑ LSI –∞–Ω–∞–ª–∏–∑–∞
        targetPhrases = getLsiWords();
        console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º LSI —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:', targetPhrases.length);
        console.log('–ü–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤:', targetPhrases.slice(0, 5));
        console.log('–í—Å–µ —Å–ª–æ–≤–∞:', targetPhrases);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        targetPhrases = [mainQuery, ...additionalQueries].filter(q => q);
        console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:', targetPhrases);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
      targetPhrases = targetPhrases.filter(phrase =>
        typeof phrase === 'string' && phrase.trim().length > 0
      ).map(phrase => phrase.trim());

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Ñ—Ä–∞–∑ –º–∞–∫—Å–∏–º—É–º (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞)
      if (targetPhrases.length > 20) {
        console.log(`‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ—Ä–∞–∑ (${targetPhrases.length}), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 20`);
        targetPhrases = targetPhrases.slice(0, 20);
      }

      if (targetPhrases.length === 0) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ LSI —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å.');
      }

      const requestData = {
        url: pageUrl,
        target_phrases: targetPhrases,
        window_size: windowSize,
        min_frequency: minFrequency,
        top_n: topN,
        spacy_model: spacyModel, // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ enum SpacyModel
        show_contexts: showContexts
      };

      console.log('üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π:', requestData);

      const response = await fetch('http://localhost:3001/analyzer/collocation_analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const responseText = await response.text();
      let data;

      try {
        data = JSON.parse(responseText);
      } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç:', responseText);
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${responseText}`);
      }

      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

        // –ï—Å–ª–∏ detail - —ç—Ç–æ –º–∞—Å—Å–∏–≤ (Pydantic validation errors)
        if (Array.isArray(data.detail)) {
          const errors = data.detail.map(err =>
            `${err.loc ? err.loc.join('.') : 'field'}: ${err.msg}`
          ).join('; ');
          console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', data.detail);
          throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errors}`);
        }

        throw new Error(data.detail || data.error || `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${response.status}`);
      }

      if (!data.success) {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
      }

      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω:', data);
      onSuccess(data);
      setShowSettings(false);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      onError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="relative">
      <div className="flex items-center gap-4">
        <button
          onClick={handleAnalysis}
          disabled={disabled || loading}
          className={cn(
            'px-6 py-3 rounded-md font-medium transition-colors',
            'bg-purple-600 text-white hover:bg-purple-700',
            'disabled:opacity-50 disabled:cursor-not-allowed',
            'inline-flex items-center justify-center gap-2',
            className
          )}
        >
          {loading ? (
            <>
              <span className="inline-block animate-spin">‚è≥</span>
              <span>–ê–Ω–∞–ª–∏–∑ —Å–µ–º–∞–Ω—Ç–∏–∫–∏...</span>
            </>
          ) : (
            <>
              <span>üîç</span>
              <span>–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π</span>
            </>
          )}
        </button>

        <button
          onClick={() => setShowSettings(!showSettings)}
          className="px-4 py-3 rounded-md border border-gray-300 hover:bg-gray-50 transition-colors"
          title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"
        >
          ‚öôÔ∏è
        </button>
      </div>

      {/* –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {showSettings && (
        <div className="absolute top-full left-0 mt-2 p-4 bg-white rounded-lg shadow-lg border border-gray-200 z-10 min-w-[300px]">
          <h4 className="font-medium mb-3">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞</h4>

          <div className="space-y-3">
            <div>
              <label className="block text-sm text-gray-600 mb-1">
                –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
              </label>
              <input
                type="number"
                min="5"
                max="50"
                value={windowSize}
                onChange={(e) => setWindowSize(Number(e.target.value))}
                className="w-full px-3 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">
                –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
              </label>
              <input
                type="number"
                min="1"
                max="10"
                value={minFrequency}
                onChange={(e) => setMinFrequency(Number(e.target.value))}
                className="w-full px-3 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">
                –¢–æ–ø —Å–ª–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
              </label>
              <input
                type="number"
                min="10"
                max="100"
                value={topN}
                onChange={(e) => setTopN(Number(e.target.value))}
                className="w-full px-3 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>

            <div>
              <label className="block text-sm text-gray-600 mb-1">
                –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å
              </label>
              <select
                value={spacyModel}
                onChange={(e) => setSpacyModel(e.target.value)}
                className="w-full px-3 py-1 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
              >
                <option value="ru_core_news_sm">–†—É—Å—Å–∫–∏–π (–º–∞–ª–µ–Ω—å–∫–∞—è)</option>
                <option value="ru_core_news_md">–†—É—Å—Å–∫–∏–π (—Å—Ä–µ–¥–Ω—è—è)</option>
                <option value="ru_core_news_lg">–†—É—Å—Å–∫–∏–π (–±–æ–ª—å—à–∞—è)</option>
                <option value="en_core_web_sm">English (small)</option>
                <option value="en_core_web_md">English (medium)</option>
                <option value="en_core_web_lg">English (large)</option>
              </select>
            </div>

            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="showContexts"
                checked={showContexts}
                onChange={(e) => setShowContexts(e.target.checked)}
                className="rounded"
              />
              <label htmlFor="showContexts" className="text-sm text-gray-600">
                –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
              </label>
            </div>

            {/* –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LSI —Å–ª–æ–≤ */}
            {lsiResults && (
              <div className="flex items-center gap-2 p-2 bg-purple-50 rounded">
                <input
                  type="checkbox"
                  id="useLsiWords"
                  checked={useLsiWords}
                  onChange={(e) => setUseLsiWords(e.target.checked)}
                  className="rounded"
                />
                <label htmlFor="useLsiWords" className="text-sm font-medium text-purple-700">
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ LSI –∞–Ω–∞–ª–∏–∑–∞
                </label>
              </div>
            )}

            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã */}
            {useLsiWords && lsiResults && (
              <div className="mt-2 p-2 bg-gray-50 rounded max-h-32 overflow-y-auto">
                <div className="text-xs text-gray-600 mb-1">–ë—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:</div>
                <div className="text-xs text-gray-800 space-y-1">
                  {getLsiWords().slice(0, 10).map((word, idx) => (
                    <span key={idx} className="inline-block bg-white px-2 py-1 rounded mr-1 mb-1">
                      {word}
                    </span>
                  ))}
                  {getLsiWords().length > 10 && (
                    <span className="text-gray-500">...–∏ –µ—â–µ {getLsiWords().length - 10}</span>
                  )}
                </div>
              </div>
            )}
          </div>

          <button
            onClick={() => setShowSettings(false)}
            className="mt-4 w-full px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded transition-colors text-sm"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      )}
    </div>
  );
};