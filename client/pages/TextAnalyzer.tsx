import React, { useState, useMemo, useEffect } from "react";
import { Input, InputURL, Select, Checkbox } from "@/components/forms";
import { Button } from "@/components/buttons";
import { RecalculateButton } from '@/components/buttons/RecalculateButton';
import { AddQuerySection } from "@/components/ui/AddQuerySection";
import { ProgressBar } from "@/components/progress_bars/ProgressBar";
import { ResultsTable } from "@/components/tables/ResultsTable";
import { ComparisonTable } from "@/components/tables/ComparisonTable";
import { LSIResults } from "@/components/tables/LSIResults";
import { KeywordsResults } from "@/components/tables/KeywordsResults";
import { CollocationAnalysisButton } from '@/components/buttons/CollocationAnalysisButton';
import { CollocationResultsDisplay } from '@/components/tables/CollocationResultsDisplay.tsx';
import { useTextAnalyzer } from "@/hooks/useTextAnalyzer";
import { useCollocationAnalysis } from '@/hooks/useCollocationAnalysis';
import { HelpTooltip } from "@/components/ui/HelpTooltip";
import ToolDescription from "@/components/ToolDescription/ToolDescription";
import { useTranslation } from 'react-i18next';

const TextAnalyzerPage: React.FC = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à custom hook
  const {
    isLoading,
    progress,
    results,
    setResults,
    error,
    lsiLoading,
    lsiProgress,
    lsiResults,
    lsiError,
    keywordsLoading,
    keywordsProgress,
    keywordsResults,
    keywordsError,
    startAnalysis,
    loadStopWordsFromFile,
    resetResults,
    analyzeSinglePage,
    startLSIAnalysis,
    startKeywordsAnalysis,
    setLsiResults,
    setKeywordsResults,
  } = useTextAnalyzer();

  const [collocationOriginalPhrases, setCollocationOriginalPhrases] = useState<string[]>([]);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π
  const {
    loading: collocationLoading,
    progress: collocationProgress,
    results: collocationResults,
    error: collocationError,
    startCollocationAnalysis,
    resetCollocationResults,
    setCollocationResults,
  } = useCollocationAnalysis();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [checkAI, setCheckAI] = useState(false);
  const [checkSpelling, setCheckSpelling] = useState(false);
  const [checkUniqueness, setCheckUniqueness] = useState(false);
  const [pageUrl, setPageUrl] = useState("");
  const [mainQuery, setMainQuery] = useState("");
  const [additionalQueries, setAdditionalQueries] = useState<string[]>([]);
  const [excludedWords, setExcludedWords] = useState<string[]>([]);
  const [excludePlatforms, setExcludePlatforms] = useState(false);
  const [parseArchived, setParseArchived] = useState(false);
  const [searchEngine, setSearchEngine] = useState("yandex");
  const [region, setRegion] = useState("msk");
  const [topSize, setTopSize] = useState("10");
  const [calculateByMedian, setCalculateByMedian] = useState(false);
  const [recalculating, setRecalculating] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const [selectedCompetitors, setSelectedCompetitors] = useState<string[]>([]);
  const [additionalUrl, setAdditionalUrl] = useState("");
  const [addingUrl, setAddingUrl] = useState(false);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const [additionalResults, setAdditionalResults] = useState<
    Array<{
      url: string;
      word_count_in_a?: number;
      word_count_outside_a?: number;
      text_fragments_count?: number;
      total_visible_words?: number;
      parsed_from?: string;
      fallback_used?: boolean;
    }>
  >([]);

  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ state –∏–∑ localStorage –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    try {
      const savedStr = localStorage.getItem("textAnalyzerForm");
      if (!savedStr) return;
      const saved = JSON.parse(savedStr);

      // --- —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ ---
      if (saved.results) {
        setResults(saved.results);
      }

      if (saved.additionalResults) {
        setAdditionalResults(saved.additionalResults);
      }

      // --- –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã ---
      if (saved.selectedCompetitors) {
        setSelectedCompetitors(saved.selectedCompetitors);
      }

      // --- —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π ---
      if (saved.collocationResults) {
        setCollocationResults(saved.collocationResults);
      }

      if (saved.collocationOriginalPhrases) {
        setCollocationOriginalPhrases(saved.collocationOriginalPhrases);
      }

      // --- –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã ---
      if (saved.pageUrl) setPageUrl(saved.pageUrl);
      if (saved.mainQuery) setMainQuery(saved.mainQuery);
      if (saved.additionalQueries) setAdditionalQueries(saved.additionalQueries);
      if (saved.excludedWords) setExcludedWords(saved.excludedWords);
      if (typeof saved.excludePlatforms === "boolean")
        setExcludePlatforms(saved.excludePlatforms);
      if (typeof saved.parseArchived === "boolean")
        setParseArchived(saved.parseArchived);
      if (saved.searchEngine) setSearchEngine(saved.searchEngine);
      if (saved.region) setRegion(saved.region);
      if (saved.topSize) setTopSize(saved.topSize);
      if (typeof saved.calculateByMedian === "boolean")
        setCalculateByMedian(saved.calculateByMedian);
    } catch (e) {
      console.error("Failed to restore TextAnalyzer form", e);
    }
  }, []);

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    const formState = {
      pageUrl,
      mainQuery,
      additionalQueries,
      excludedWords,
      excludePlatforms,
      parseArchived,
      searchEngine,
      region,
      topSize,
      calculateByMedian,
      additionalResults,
      results,
      selectedCompetitors,
      collocationOriginalPhrases,
      collocationResults, // –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π
    };

    try {
      localStorage.setItem("textAnalyzerForm", JSON.stringify(formState));
    } catch (e) {
      console.error("Failed to save TextAnalyzer form", e);
    }
  }, [
    pageUrl,
    mainQuery,
    additionalQueries,
    excludedWords,
    excludePlatforms,
    parseArchived,
    searchEngine,
    region,
    topSize,
    calculateByMedian,
    additionalResults,
    results,
    selectedCompetitors,
    collocationResults, // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  ]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
  const handleRecalculateSuccess = (data: any) => {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞:', data);

    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ "–ù–∞—à–µ–≥–æ —Å–∞–π—Ç–∞" –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      if (data.my_page && results) {
        const updatedResults = {
          ...results,
          my_page: {
            ...results.my_page,
            parsed_data: data.my_page.parsed_data,
            status: data.my_page.status || 'success'
          }
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setResults(updatedResults);
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞:', updatedResults.my_page);
      }

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º LSI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (data.lsi && lsiResults) {
        const updatedLsiResults = {
          unigrams: data.lsi.unigrams || lsiResults.unigrams,
          bigrams: data.lsi.bigrams || lsiResults.bigrams,
          trigrams: data.lsi.trigrams || lsiResults.trigrams
        };

        setLsiResults(updatedLsiResults);
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã LSI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      }

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º Keywords —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
      if (data.keywords && data.keywords.table && keywordsResults) {
        const updatedKeywordsResults = {
          ...keywordsResults,
          table: data.keywords.table,
          search_engine: data.keywords.search_engine || keywordsResults.search_engine
        };

        setKeywordsResults(updatedKeywordsResults);
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã Keywords —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      }

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
      if (data.collocations) {
        setCollocationResults(data.collocations);
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert('‚úÖ –ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleGetTop = async () => {
    const result = await startAnalysis(
      pageUrl,
      mainQuery,
      additionalQueries,
      excludedWords,
      {
        checkAI,
        checkSpelling,
        checkUniqueness,
        searchEngine,
        region,
        topSize,
        excludePlatforms,
        parseArchived,
        calculateByMedian,
      },
    );

    // –û—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –Ω–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ
    if (result && result.success) {
      setAdditionalResults([]);
      setSelectedCompetitors([]);
      console.log("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileUpload = async () => {
    const words = await loadStopWordsFromFile();
    if (words.length > 0) {
      setExcludedWords(words);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const handleToggleCompetitor = (url: string) => {
    setSelectedCompetitors((prev) =>
      prev.includes(url) ? prev.filter((u) => u !== url) : [...prev, url],
    );
  };

  const handleSelectAll = () => {
    if (!combinedResults) return;

    if (selectedCompetitors.length === combinedResults.length) {
      setSelectedCompetitors([]);
    } else {
      setSelectedCompetitors(combinedResults.map((c) => c.url));
    }
  };

  const handleAddUrl = async () => {
    if (!additionalUrl.trim()) return;

    setAddingUrl(true);
    try {
      const result = await analyzeSinglePage(additionalUrl);

      if (result.error) {
        alert(`–û—à–∏–±–∫–∞: ${result.error}`);
      } else {
        const newResult = {
          url: additionalUrl,
          word_count_in_a: result.word_count_in_a,
          word_count_outside_a: result.word_count_outside_a,
          text_fragments_count: result.text_fragments_count,
          total_visible_words: result.total_visible_words,
          parsed_from: "additional",
          fallback_used: false,
        };

        setAdditionalResults((prev) => [...prev, newResult]);
        setAdditionalUrl("");
      }
    } catch (error) {
      console.error("Error adding URL:", error);
      alert(
        `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      );
    } finally {
      setAddingUrl(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ LSI –∞–Ω–∞–ª–∏–∑–∞
  const handleGoToLSI = async () => {
    if (!results?.my_page?.url || selectedCompetitors.length === 0) {
      alert(
        "–î–ª—è LSI –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∏–º–µ—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
      );
      return;
    }

    await startLSIAnalysis(
      selectedCompetitors,
      results.my_page.url,
      mainQuery,
      additionalQueries,
      calculateByMedian,
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π
  const handleCollocationAnalysis = async () => {
    if (!results?.my_page?.url || !mainQuery) {
      alert('–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å');
      return;
    }

    await startCollocationAnalysis(
      results.my_page.url,
      mainQuery,
      additionalQueries
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const handleKeywordsAnalysis = async () => {
    if (!results?.my_page?.url || selectedCompetitors.length === 0) {
      alert(
        "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∏–º–µ—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
      );
      return;
    }

    await startKeywordsAnalysis(
      selectedCompetitors,
      results.my_page.url,
      mainQuery,
      additionalQueries,
      searchEngine,
    );
  };

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
  const combinedResults = useMemo(() => {
    const mainResults =
      results?.competitors?.map((competitor) => ({
        url: competitor.url,
        word_count_in_a: competitor.parsed_data?.word_count_in_a,
        word_count_outside_a: competitor.parsed_data?.word_count_outside_a,
        text_fragments_count: competitor.parsed_data?.text_fragments_count,
        total_visible_words: competitor.parsed_data?.total_visible_words,
        parsed_from: competitor.parsed_from,
        fallback_used: competitor.fallback_used,
      })) || [];

    return [...mainResults, ...additionalResults];
  }, [results?.competitors, additionalResults]);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º LSI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ LSIResults
  const formattedLSIResults = useMemo(() => {
    console.log('LSI Results in TextAnalyzer:', lsiResults);

    if (!lsiResults) {
      console.log('No LSI results available');
      return null;
    }

    const hasData =
      (lsiResults.unigrams && lsiResults.unigrams.length > 0) ||
      (lsiResults.bigrams && lsiResults.bigrams.length > 0) ||
      (lsiResults.trigrams && lsiResults.trigrams.length > 0);

    if (!hasData) {
      console.log('LSI results are empty');
      return null;
    }

    console.log('Returning LSI results with:', {
      unigrams: lsiResults.unigrams?.length || 0,
      bigrams: lsiResults.bigrams?.length || 0,
      trigrams: lsiResults.trigrams?.length || 0,
    });

    return lsiResults;
  }, [lsiResults]);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ComparisonTable
  const selectedResults = combinedResults.filter((result) =>
    selectedCompetitors.includes(result.url),
  );

  const mySiteAnalysis = results?.my_page?.parsed_data
    ? {
        word_count_in_a: results.my_page.parsed_data.word_count_in_a,
        word_count_outside_a: results.my_page.parsed_data.word_count_outside_a,
        text_fragments_count: results.my_page.parsed_data.text_fragments_count,
        total_visible_words: results.my_page.parsed_data.total_visible_words,
      }
    : null;

  const helpText = `–°–∞–π—Ç—ã —Å –∞–Ω—Ç–∏–±–æ—Ç-–∑–∞—â–∏—Ç–æ–π (CAPTCHA, Cloudflare, WAF) –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã: –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã.
User-Agent —Å—Ç—Ä–æ–∫–∏ –∏ IP-–∞–¥—Ä–µ—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.`;

  const { t } = useTranslation();

  return (
    <div className="flex-1 bg-gray-0 p-3">
      <div className="w-full">
        <div className="bg-white rounded-lg p-6 space-y-6">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
          <div className="border-b pb-4">
            <h1 className="text-2xl font-bold text-gray-900">
              –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            </h1>
            <p className="text-gray-600 mt-1">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¢–û–ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            </p>
          </div>
          <div className="overflow-hidden">
            <ToolDescription
              shortDescription="–ê–Ω–∞–ª–∏–∑ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏"
              fullDescription={
                <div className="space-y-3">
                  <p>
                    <strong>–¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä</strong> ‚Äî —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
                    –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ–≥–æ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –∏–∑ –¢–û–ü –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏.
                  </p>
                  
                  <div>
                    <strong>–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:</strong>
                    <ul className="list-disc list-inside mt-1 space-y-1">
                      <li>–û–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ —Ç–µ–≥–∞–º</li>
                      <li>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ LSI-—Ñ—Ä–∞–∑</li>
                      <li>–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ –∏ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–∏</li>
                      <li>–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞</li>
                      <li>SEO-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</li>
                    </ul>
                  </div>

                  <div>
                    <strong>–ó–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong>
                    <ul className="list-disc list-inside mt-1 space-y-1">
                      <li>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã</li>
                      <li>–ù–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã</li>
                      <li>–£–≤–∏–¥–µ—Ç—å —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</li>
                      <li>–£–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ</li>
                      <li>–°–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</li>
                    </ul>
                  </div>
                </div>
              }
            />
          </div>

          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}

          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º LSI –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å */}
          {lsiError && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              <strong>–û—à–∏–±–∫–∞ LSI –∞–Ω–∞–ª–∏–∑–∞:</strong> {lsiError}
            </div>
          )}

          {/* –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π */}
          {collocationError && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              <strong>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π:</strong> {collocationError}
            </div>
          )}

          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Keywords –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å */}
          {keywordsError && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              <strong>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:</strong> {keywordsError}
            </div>
          )}

          {/* URL and Query */}
          <div className="space-y-4">
            <div className="flex gap-4 items-start">
              <div className="flex-1">
                <InputURL
                  type="url"
                  label="URL —Å–∞–π—Ç–∞"
                  value={pageUrl}
                  onChange={setPageUrl}
                  autoProtocol={true}
                  required
                />
              </div>
              <div className="pt-8">
                <HelpTooltip content={helpText} />
              </div>
              <div className="flex-1">
                <Input
                  label="–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                  value={mainQuery}
                  onChange={setMainQuery}
                  required
                />
              </div>
            </div>
          </div>

          {/* Additional Queries Section */}
          <AddQuerySection
            label={t('additionalQueries.label')}
            maxCount={9}
            onChange={setAdditionalQueries}
            buttonText={t('additionalQueries.addButton')}
            placeholder={t('additionalQueries.placeholder')}
            initialQueries={additionalQueries}
          />

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <Select
              label="–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ..."
              value={searchEngine}
              onChange={setSearchEngine}
              options={[
                { value: "yandex", label: "–Ø–Ω–¥–µ–∫—Å" },
                { value: "google", label: "Google" },
              ]}
            />
            <Select
              label="–†–µ–≥–∏–æ–Ω"
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
              value={region}
              onChange={setRegion}
              options={[
                { value: "msk", label: "–ú–æ—Å–∫–≤–∞" },
                { value: "spb", label: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" },
                { value: "nsk", label: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" },
                { value: "nn", label: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥" },
                { value: "ekb", label: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥" },
                { value: "kzn", label: "–ö–∞–∑–∞–Ω—å" },
                { value: "sochi", label: "–°–æ—á–∏" },
                { value: "krd", label: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä" },
                { value: "smr", label: "–°–∞–º–∞—Ä–∞" },
                { value: "ufa", label: "–£—Ñ–∞" },
                { value: "rnd", label: "–†–æ—Å—Ç–æ–≤ –Ω–∞-–î–æ–Ω—É" },
                { value: "omsk", label: "–û–º—Å–∫" },
                { value: "chel", label: "–ß–µ–ª—è–±–∏–Ω—Å–∫" },
                { value: "krsk", label: "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫" },
                { value: "perm", label: "–ü–µ—Ä–º—å" },
                { value: "vlg", label: "–í–æ–ª–≥–æ–≥—Ä–∞–¥" },
                { value: "vor", label: "–í–æ—Ä–æ–Ω–µ–∂" },
                { value: "srt", label: "–°–∞—Ä–∞—Ç–æ–≤" },
                { value: "tlt", label: "–¢–æ–ª—å—è—Ç—Ç–∏" },
                { value: "izh", label: "–ò–∂–µ–≤—Å–∫" },
              ]}
              allowCustomValue={true}
            />
            <Select
              label="–†–∞–∑–º–µ—Ä —Ç–æ–ø–∞"
              placeholder="–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
              value={topSize}
              onChange={setTopSize}
              options={[
                { value: "10", label: "–¢–û–ü-10" },
                { value: "20", label: "–¢–û–ü-20" },
                { value: "50", label: "–¢–û–ü-50" },
              ]}
            />
          </div>

          {/* Parsing Settings */}
          <div className="space-y-4">
            <h2 className="text-lg font-bold text-black font-['Open_Sans',-apple-system,Roboto,Helvetica,sans-serif]">
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            </h2>

            <Checkbox
              label="–ò—Å–∫–ª—é—á–∞—Ç—å –ø–ª–æ—â–∞–¥–∫–∏ (Avito, –Ø–Ω–¥–µ–∫—Å.–£—Å–ª—É–≥–∏, —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏)"
              checked={excludePlatforms}
              onChange={setExcludePlatforms}
            />
            <Checkbox
              label="–ü–∞—Ä—Å–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏"
              checked={parseArchived}
              onChange={setParseArchived}
            />
            <Checkbox
              label="–°—á–∏—Ç–∞—Ç—å –ø–æ –º–µ–¥–∏–∞–Ω–µ"
              checked={calculateByMedian}
              onChange={setCalculateByMedian}
            />

            <div className="flex items-end gap-4">
              <AddQuerySection
                label="–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞"
                maxCount={10}
                onChange={setExcludedWords}
                buttonText="+ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–æ"
                placeholder="–°—Ç–æ–ø-—Å–ª–æ–≤–æ"
                initialQueries={excludedWords}
              />
              <Button variant="outline" onClick={handleFileUpload}>
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
              </Button>
            </div>
          </div>

          {/* Submit Button with loading state */}
          <div className="space-y-4">
            <div className="flex justify-start items-center gap-4">
              <Button
                size="large"
                disabled={!pageUrl || !mainQuery || isLoading}
                onClick={handleGetTop}
              >
                {isLoading ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–ü–æ–ª—É—á–∏—Ç—å –¢–û–ü"}
              </Button>

              {results && (
                <Button variant="outline" size="medium" onClick={resetResults}>
                  –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                </Button>
              )}
            </div>

            {/* –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π */}
            {isLoading && (
              <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                <ProgressBar
                  progress={progress}
                  label="–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                  subLabel="–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ..."
                  showPercentage={true}
                  color="red"
                />
                <p className="text-gray-600 text-sm mt-3">
                  –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...
                </p>
              </div>
            )}
          </div>

          {/* Results Table */}
          {combinedResults.length > 0 && !isLoading && (
            <ResultsTable
              results={combinedResults}
              mySiteAnalysis={mySiteAnalysis}
              selectedCompetitors={selectedCompetitors}
              onToggleCompetitor={handleToggleCompetitor}
              onSelectAll={handleSelectAll}
              parseSavedCopies={parseArchived}
              additionalUrl={additionalUrl}
              setAdditionalUrl={setAdditionalUrl}
              onAddUrl={handleAddUrl}
              addingUrl={addingUrl}
            />
          )}

          {/* –ü–ª–∞–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          {results && combinedResults.length > 0 && (
            <RecalculateButton
              pageUrl={pageUrl}
              competitorData={combinedResults}
              mainQuery={mainQuery}
              additionalQueries={additionalQueries}
              searchEngine={searchEngine}
              medianMode={calculateByMedian}
              lsiData={lsiResults}
              keywordsData={keywordsResults?.table}
              onSuccess={handleRecalculateSuccess}
              onError={(error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞:', error);
                alert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞: ${error}`);
              }}
              disabled={isLoading || lsiLoading || keywordsLoading || collocationLoading || recalculating}
              floating={true}
            />
          )}

          {/* Comparison Table - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã */}
          {selectedCompetitors.length > 0 && mySiteAnalysis && !isLoading && (
            <ComparisonTable
              results={selectedResults}
              selectedCompetitors={selectedCompetitors}
              mySiteAnalysis={mySiteAnalysis}
              medianMode={calculateByMedian}
              onGoToLSI={handleGoToLSI}
              lsiLoading={lsiLoading}
              lsiProgress={lsiProgress}
            />
          )}

          {/* LSI Progress Bar */}
          {lsiLoading && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <ProgressBar
                progress={lsiProgress}
                label="–ü—Ä–æ–≥—Ä–µ—Å—Å LSI –∞–Ω–∞–ª–∏–∑–∞"
                showPercentage={true}
                color="red"
                className="mb-2"
              />
              <p className="text-red-700 text-sm">
                –ê–Ω–∞–ª–∏–∑ LSI –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...
              </p>
            </div>
          )}

          {/* LSI Results */}
          {formattedLSIResults && !lsiLoading && (
            <LSIResults
              lsiResults={formattedLSIResults}
              selectedCompetitors={selectedCompetitors}
              mySiteAnalysis={mySiteAnalysis}
              results={combinedResults}
              medianMode={calculateByMedian}
              onKeywordsAnalysis={handleKeywordsAnalysis}
              keywordsLoading={keywordsLoading}
              keywordsProgress={keywordsProgress}
            />
          )}

          {/* Keywords Progress Bar */}
          {keywordsLoading && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <ProgressBar
                progress={keywordsProgress}
                label="–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
                showPercentage={true}
                color="red"
                className="mb-2"
              />
              <p className="text-red-700 text-sm">
                –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...
              </p>
            </div>
          )}

          {/* Keywords Results */}
          {keywordsResults && !keywordsLoading && (
            <KeywordsResults
              keywordsData={keywordsResults.table}
              keywordsTotalWords={keywordsResults.total_words}
              searchEngine={keywordsResults.search_engine}
              onBack={() => {
                console.log("Back to previous step");
              }}
            />
          )}

          {/* –ë–õ–û–ö –ê–ù–ê–õ–ò–ó–ê –ö–û–õ–õ–û–ö–ê–¶–ò–ô - –í –°–ê–ú–û–ú –ö–û–ù–¶–ï –°–¢–†–ê–ù–ò–¶–´ */}
          {/* –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ Keywords –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ LSI –∞–Ω–∞–ª–∏–∑–∞ */}
          {(keywordsResults || formattedLSIResults) && !lsiLoading && !keywordsLoading && !collocationLoading && (
            <div className="mt-6 p-4 bg-purple-50 rounded-lg border border-purple-200">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h4 className="text-lg font-semibold text-gray-900 mb-2">
                    –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–∫–æ–ª–ª–æ–∫–∞—Ü–∏–∏)
                  </h4>
                  <p className="text-sm text-gray-600 mb-4">
                    –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä—è–¥–æ–º —Å –≤–∞—à–∏–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.
                    –ü–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ LSI-—Å–ª–æ–≤–∞ –∏ –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
                  </p>
                </div>
                  <CollocationAnalysisButton
                    pageUrl={results?.my_page?.url || pageUrl}
                    competitorUrls={selectedCompetitors}  // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                    mainQuery={mainQuery}
                    additionalQueries={additionalQueries}
                    lsiResults={lsiResults}
                    onStart={() => {
                      console.log('–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π');
                    }}
                    onSuccess={(data, originalPhrases) => {  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è originalPhrases
                      console.log('–£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π:', data);
                      setCollocationResults(data);
                      setCollocationOriginalPhrases(originalPhrases);
                    }}
                    onError={(error) => {
                      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π:', error);
                      alert(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error}`);
                    }}
                    disabled={collocationLoading || lsiLoading || keywordsLoading}
                  />
              </div>
            </div>
          )}

          {/* Progress Bar –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π */}
          {collocationLoading && (
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <ProgressBar
                progress={collocationProgress}
                label="–ê–Ω–∞–ª–∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π"
                subLabel="–ü–æ–∏—Å–∫ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π –∏ PMI –∞–Ω–∞–ª–∏–∑..."
                showPercentage={true}
                color="purple"
                className="mb-2"
              />
              <p className="text-purple-700 text-sm">
                –ê–Ω–∞–ª–∏–∑ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...
              </p>
            </div>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–π */}
          {collocationResults && !collocationLoading && (
            <CollocationResultsDisplay
              data={collocationResults}
              originalPhrases={collocationOriginalPhrases}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default TextAnalyzerPage;